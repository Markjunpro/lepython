legit legit legit
***Python教程***
自动备份MP3（小工具），脚本
做网站，Youtube 豆瓣 知乎 instagram
后台

***Python简介***
guido van rossum-1989-圣诞节
600多种编程语言
优雅，明确，简单


python缺点：
1，运行速度慢。解释型语言VS编译型语言
2，代码不能加密。字节码VS机器码（.exe)

***安装python***
unix是最早的出来的多任务多用户系统，它是收费的。
linux是一个牛人为了让人们用到免费的类unix系统，就弄出了linux的内核，然后就弄出了linux
mac os 的内核是unix，它是由Unix的一个分支(BSD)发展过来的，内核叫darwin(达尔文)

***Python解释器***
官方 CPython

iPython
PyPy
Jpython
IronPython


***第一个Python程序***
print（）
exit()
命令行模式:可以执行python进入Python交互式环境，也可以执行python hello.py运行一个.py文件
Python交互模式: 只能输入Python代码并立刻执行
Python交互式环境会把每一行Python代码的结果自动打印出来，但是，直接运行Python代码却不会。
$ python phase1.py 


***使用文本编辑器***
Subli
me text :免费使用，但是不付费会弹出提示框
Notepad++:免费使用，有中文界面
请注意，用哪个都行，但是绝对不能用Word和Windows自带的记事本。Word保存的不是纯文本文件，而记事本会自作聪明地在文件开始的地方加上几个特殊字符（UTF-8 BOM），结果会导致程序运行出现莫名其妙的错误。

文件名：文件名只能是英文字母、数字和下划线的组合

直接运行py文件:#!/usr/bin/env python3
$ chmod a+x hello.py 执行权限


这是脚本语言共同遵守的规则：当第一行为 #!/path/to/script/interpreter时，指定了用来执行本脚本的解释器。
注意：
1、必须是文件的第一行
2、必须以#!开头，你丢了一个惊叹号
3、/path/to/script/interpreter是脚本解释器的全路径名。
例如：
#!/bin/sh           shell脚本
#!/usr/bin/perl     perl脚本
#!/usr/bin/python   python脚本
#!/usr/bin/python3  python3脚本
#!/usr/bin/python2  python2脚本
而有时不太清楚脚本解释器的具体全路径名；或者开发环境与运行环境的安装路径不同。为了保证兼容性，也可以写作：
#!/usr/bin/env python3
这样运行时会自动搜索脚本解释器的绝对路径。

/usr/bin是一个系统目录，里面存储一些系统命令，可执行程序。
类似windows操作系统的C:\Windows\System32目录。

***Python代码运行助手***
点击Run按钮，代码被发送到本机正在运行的Python代码运行助手；

Python代码运行助手将代码保存为临时文件，然后调用Python解释器执行代码；

网页显示代码执行结果：


***输入和输出***
print()函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：
>>> print('The quick brown fox', 'jumps over', 'the lazy dog')
The quick brown fox jumps over the lazy dog

name = input('please enter your name: ')
print('hello,', name)


print('1024*768=',1024*768)


***Python基础***
Python是一种计算机编程语言。计算机编程语言和我们日常使用的自然语言有所不同，最大的区别就是，自然语言在不同的语境下有不同的理解，而计算机要根据编程语言执行任务，就必须保证编程语言写出的程序决不能有歧义，所以，任何一种编程语言都有自己的一套语法，编译器或者解释器就是负责把符合语法的程序代码转换成CPU能够执行的机器码，然后执行。Python也不例外。


***Python教程***
自动备份MP3（小工具），脚本
做网站，Youtube 豆瓣 知乎 instagram
后台

***Python简介***
guido van rossum-1989-圣诞节
600多种编程语言
优雅，明确，简单


python缺点：
1，运行速度慢。解释型语言VS编译型语言
2，代码不能加密。字节码VS机器码（.exe)

***安装python***
unix是最早的出来的多任务多用户系统，它是收费的。
linux是一个牛人为了让人们用到免费的类unix系统，就弄出了linux的内核，然后就弄出了linux
mac os 的内核是unix，它是由Unix的一个分支(BSD)发展过来的，内核叫darwin(达尔文)

***Python解释器***
官方 CPython

iPython
PyPy
Jpython
IronPython


***第一个Python程序***
print（）
exit()
命令行模式:可以执行python进入Python交互式环境，也可以执行python hello.py运行一个.py文件
Python交互模式: 只能输入Python代码并立刻执行
Python交互式环境会把每一行Python代码的结果自动打印出来，但是，直接运行Python代码却不会。
$ python phase1.py 


***使用文本编辑器***
Subli
me text :免费使用，但是不付费会弹出提示框
Notepad++:免费使用，有中文界面
请注意，用哪个都行，但是绝对不能用Word和Windows自带的记事本。Word保存的不是纯文本文件，而记事本会自作聪明地在文件开始的地方加上几个特殊字符（UTF-8 BOM），结果会导致程序运行出现莫名其妙的错误。

文件名：文件名只能是英文字母、数字和下划线的组合

直接运行py文件:#!/usr/bin/env python3
$ chmod a+x hello.py 执行权限


这是脚本语言共同遵守的规则：当第一行为 #!/path/to/script/interpreter时，指定了用来执行本脚本的解释器。
注意：
1、必须是文件的第一行
2、必须以#!开头，你丢了一个惊叹号
3、/path/to/script/interpreter是脚本解释器的全路径名。
例如：
#!/bin/sh           shell脚本
#!/usr/bin/perl     perl脚本
#!/usr/bin/python   python脚本
#!/usr/bin/python3  python3脚本
#!/usr/bin/python2  python2脚本
而有时不太清楚脚本解释器的具体全路径名；或者开发环境与运行环境的安装路径不同。为了保证兼容性，也可以写作：
#!/usr/bin/env python3
这样运行时会自动搜索脚本解释器的绝对路径。

/usr/bin是一个系统目录，里面存储一些系统命令，可执行程序。
类似windows操作系统的C:\Windows\System32目录。

***Python代码运行助手***
点击Run按钮，代码被发送到本机正在运行的Python代码运行助手；

Python代码运行助手将代码保存为临时文件，然后调用Python解释器执行代码；

网页显示代码执行结果：


***输入和输出***
print()函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：
>>> print('The quick brown fox', 'jumps over', 'the lazy dog')
The quick brown fox jumps over the lazy dog

name = input('please enter your name: ')
print('hello,', name)


print('1024*768=',1024*768)


***Python基础***
Python是一种计算机编程语言。计算机编程语言和我们日常使用的自然语言有所不同，最大的区别就是，自然语言在不同的语境下有不同的理解，而计算机要根据编程语言执行任务，就必须保证编程语言写出的程序决不能有歧义，所以，任何一种编程语言都有自己的一套语法，编译器或者解释器就是负责把符合语法的程序代码转换成CPU能够执行的机器码，然后执行。Python也不例外。


以#开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。其他每一行都是一个语句，当语句以冒号:结尾时，缩进的语句视为代码块。

缩进有利有弊。好处是强迫你写出格式化的代码，但没有规定缩进是几个空格还是Tab。按照约定俗成的管理，应该始终坚持使用4个空格的缩进。

缩进的另一个好处是强迫你写出缩进较少的代码，你会倾向于把一段很长的代码拆分成若干函数，从而得到缩进较少的代码。

缩进的坏处就是“复制－粘贴”功能失效了，这是最坑爹的地方。当你重构代码时，粘贴过去的代码必须重新检查缩进是否正确。此外，IDE很难像格式化Java代码那样格式化Python代码。

最后，请务必注意，Python程序是大小写敏感的，如果写错了大小写，程序会报错。


***数据类型和变量***
整数
浮点数
字符串：单引号‘’，双引号”“ ， 转义字符\ ，  \n：换行，\t制表符，r’’
布尔值：True False 布尔运算：and or not

1.在Python2.x中raw_input( )和input( )，两个函数都存在，其中区别为

raw_input( )---将所有输入作为字符串看待，返回字符串类型
2、在python3.x中raw_input( )和input( )进行了整合，去除了raw_input( )，仅保留了input( )函数，其接收任意任性输入，将所有输入默认为字符串处理，并返回字符串类型。
int(x [,base ])         将x转换为一个整数    
long(x [,base ])        将x转换为一个长整数    
float(x )               将x转换到一个浮点数    
complex(real [,imag ])  创建一个复数    
str(x )                 将对象 x 转换为字符串    
repr(x )                将对象 x 转换为表达式字符串    
eval(str )              用来计算在字符串中的有效Python表达式,并返回一个对象    
tuple(s )               将序列 s 转换为一个元组    
list(s )                将序列 s 转换为一个列表    
chr(x )                 将一个整数转换为一个字符    
unichr(x )              将一个整数转换为Unicode字符    
ord(x )                 将一个字符转换为它的整数值    
hex(x )                 将一个整数转换为一个十六进制字符串    
oct(x )                 将一个整数转换为一个八进制字符串   
 
 
chr(65)='A'
ord('A')=65
 
int('2')=2;
str(2)='2'


变量:变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头.
这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错.和静态语言相比，动态语言更灵活，就是这个原因。

常量
所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：

Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。



***字符编码***
ASCII —127
GB2312
Shift-JIS
Euc-kr

Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）unicode:
字母A用ASCII编码是十进制的65，二进制的01000001；

字符0用ASCII编码是十进制的48，二进制的00110000，注意字符'0'和整数0是不同的；

汉字中已经超出了ASCII编码的范围，用Unicode编码是十进制的20013，二进制的01001110 00101101。

————
UTF-8
新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。

所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码

在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。


Python的字符串:
在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言

对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：
Python对bytes类型的数据用带b前缀的单引号或双引号
'ABC'.encode('ascii')

在bytes中，无法显示为ASCII字符的字节，用\x##显示。
b'ABC'.decode('ascii')


格式化



***使用list和tuple***
list

Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。
 classmates = ['Michael', 'Bob', 'Tracy']
>>> classmates
['Michael', 'Bob', 'Tracy']

classmates.append('Adam')
classmates.insert(1, 'Jack')
classmates.pop() 
classmates.pop(1)


tuple
另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：
classmates = ('Michael', 'Bob', 'Tracy')




***条件判断***
if <条件判断1>:
    <执行1>
elif <条件判断2>:
    <执行2>
elif <条件判断3>:
    <执行3>
else:
    <执行4>

***循环***
Python的循环有两种，一种是for...in循环，依次把list或tuple中的每个元素迭代出来，看例子：

names = ['Michael', 'Bob', 'Tracy']
for name in names:
    print(name)
所以for x in ...循环就是把每个元素代入变量x，然后执行缩进块的语句。

***使用dict和set***

和list比较，dict有以下几个特点：

查找和插入的速度极快，不会随着key的增加而变慢；
需要占用大量的内存，内存浪费多。
而list相反：

查找和插入的时间随着元素的增加而增加；
占用空间小，浪费内存很少。
所以，dict是用空间来换取时间的一种方法。


***函数***
抽象是数学中非常常见的概念。举个例子：

计算数列的和，比如：1 + 2 + 3 + ... + 100，写起来十分不方便，于是数学家发明了求和符号∑，可以把1 + 2 + 3 + ... + 100记作：

100

∑n

n=1

这种抽象记法非常强大，因为我们看到 ∑ 就可以理解成求和，而不是还原成低级的加法运算。

而且，这种抽象记法是可扩展的，比如：

100

∑(n2+1)

n=1

***调用函数***
Python内置了很多有用的函数，我们可以直接调用。
要调用一个函数，需要知道函数的名称和参数，比如求绝对值的函数abs，只有一个参数

***定义函数***
在Python中，定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。


定义函数时，需要确定函数名和参数个数；

如果有必要，可以先对参数的数据类型做检查；

函数体内部可以用return随时返回函数结果；

函数执行完毕也没有return语句时，自动return None。

函数可以同时返回多个值，但其实就是一个tuple。


***函数的参数***

Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。

默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！

要注意定义可变参数和关键字参数的语法：

*args是可变参数，args接收的是一个tuple；

**kw是关键字参数，kw接收的是一个dict。

以及调用函数时如何传入可变参数和关键字参数的语法：

可变参数既可以直接传入：func(1, 2, 3)，又可以先组装list或tuple，再通过*args传入：func(*(1, 2, 3))；

关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装dict，再通过**kw传入：func(**{'a': 1, 'b': 2})。

使用*args和**kw是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。

命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。

定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符*，否则定义的将是位置参数。



***递归函数***
在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。


***高级特性***

